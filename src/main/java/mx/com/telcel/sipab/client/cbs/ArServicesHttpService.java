package mx.com.telcel.sipab.client.cbs;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.3
 * 2025-10-24T12:33:03.578-06:00
 * Generated source version: 4.0.3
 *
 */
@WebServiceClient(name = "ArServicesHttpService",
                  wsdlLocation = "http://iib.telcel.com:1722/mexico/telcel/di/sds/bes/cbs/arservices/v3?wsdl",
                  targetNamespace = "http://www.amx.com.mx/mexico/telcel/di/sds/bes/esb/arservices")
public class ArServicesHttpService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.amx.com.mx/mexico/telcel/di/sds/bes/esb/arservices", "ArServicesHttpService");
    public final static QName ArServicesHttpPort = new QName("http://www.amx.com.mx/mexico/telcel/di/sds/bes/esb/arservices", "ArServicesHttpPort");
    static {
        URL url = null;
        try {
            url = new URL("http://iib.telcel.com:1722/mexico/telcel/di/sds/bes/cbs/arservices/v3?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ArServicesHttpService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://iib.telcel.com:1722/mexico/telcel/di/sds/bes/cbs/arservices/v3?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ArServicesHttpService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ArServicesHttpService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ArServicesHttpService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public ArServicesHttpService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ArServicesHttpService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ArServicesHttpService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns ArServices
     */
    @WebEndpoint(name = "ArServicesHttpPort")
    public ArServices getArServicesHttpPort() {
        return super.getPort(ArServicesHttpPort, ArServices.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ArServices
     */
    @WebEndpoint(name = "ArServicesHttpPort")
    public ArServices getArServicesHttpPort(WebServiceFeature... features) {
        return super.getPort(ArServicesHttpPort, ArServices.class, features);
    }

}
